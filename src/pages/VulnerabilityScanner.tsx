
import { useState, useEffect } from "react";
import Navbar from "@/components/Layout/Navbar";
import Footer from "@/components/Home/Footer";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardHeader, 
  CardTitle 
} from "@/components/ui/card";
import {
  AlertTriangle,
  Shield,
  Search,
  AlertCircle,
  CheckCircle2,
  Clock,
  RefreshCw,
  Globe,
  Server,
  Lock,
  Eye,
  Activity,
  Bug,
  Zap,
  Target,
  FileText
} from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { useToast } from "@/components/ui/use-toast";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

interface Vulnerability {
  id: string;
  severity: "critical" | "high" | "medium" | "low";
  title: string;
  description: string;
  impact: string;
  recommendation: string;
  cve?: string;
  affected_service: string;
}

interface ScanResult {
  target: string;
  scan_time: Date;
  vulnerabilities: Vulnerability[];
  open_ports: Array<{ port: number; service: string; version?: string }>;
  ssl_issues: Array<{ issue: string; severity: string }>;
  headers_analysis: Array<{ header: string; status: "secure" | "missing" | "insecure"; recommendation?: string }>;
}

const VulnerabilityScanner = () => {
  const [scanTarget, setScanTarget] = useState("");
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [scanResult, setScanResult] = useState<ScanResult | null>(null);
  const [activeTab, setActiveTab] = useState("overview");
  const { toast } = useToast();

  useEffect(() => {
    document.title = "CyberShield | Vulnerability Scanner";
  }, []);

  const generateMockScanResult = (target: string): ScanResult => {
    const vulnerabilities: Vulnerability[] = [
      {
        id: "CVE-2024-0001",
        severity: "critical",
        title: "Outdated SSL/TLS Configuration",
        description: "The server supports outdated SSL/TLS protocols that are vulnerable to attacks.",
        impact: "Attackers could intercept and decrypt sensitive communications.",
        recommendation: "Disable SSLv2, SSLv3, and TLS 1.0. Enable only TLS 1.2 and 1.3.",
        cve: "CVE-2024-0001",
        affected_service: "HTTPS"
      },
      {
        id: "MISC-0001",
        severity: "high",
        title: "Missing Security Headers",
        description: "Critical security headers are not implemented, exposing the application to various attacks.",
        impact: "Vulnerability to XSS, clickjacking, and MIME-type sniffing attacks.",
        recommendation: "Implement Content-Security-Policy, X-Frame-Options, and X-Content-Type-Options headers.",
        affected_service: "Web Server"
      },
      {
        id: "CVE-2024-0002",
        severity: "medium",
        title: "Directory Listing Enabled",
        description: "Directory browsing is enabled on the web server, potentially exposing sensitive files.",
        impact: "Information disclosure that could aid in further attacks.",
        recommendation: "Disable directory listing in web server configuration.",
        cve: "CVE-2024-0002",
        affected_service: "Web Server"
      },
      {
        id: "INFO-0001",
        severity: "low",
        title: "Server Information Disclosure",
        description: "The server reveals detailed version information in HTTP headers.",
        impact: "Attackers can identify specific vulnerabilities for the disclosed versions.",
        recommendation: "Configure server to hide version information in HTTP headers.",
        affected_service: "HTTP"
      }
    ];

    return {
      target,
      scan_time: new Date(),
      vulnerabilities,
      open_ports: [
        { port: 80, service: "HTTP", version: "Apache 2.4.41" },
        { port: 443, service: "HTTPS", version: "Apache 2.4.41" },
        { port: 22, service: "SSH", version: "OpenSSH 8.2" },
        { port: 3306, service: "MySQL", version: "8.0.25" }
      ],
      ssl_issues: [
        { issue: "Weak cipher suites detected", severity: "medium" },
        { issue: "Certificate expires in 30 days", severity: "low" }
      ],
      headers_analysis: [
        { header: "Content-Security-Policy", status: "missing", recommendation: "Implement CSP to prevent XSS attacks" },
        { header: "X-Frame-Options", status: "missing", recommendation: "Add to prevent clickjacking" },
        { header: "Strict-Transport-Security", status: "secure" },
        { header: "X-Content-Type-Options", status: "insecure", recommendation: "Set to 'nosniff'" }
      ]
    };
  };

  const handleScan = async () => {
    if (!scanTarget.trim()) {
      toast({
        title: "Error",
        description: "Please enter a target to scan",
        variant: "destructive",
      });
      return;
    }

    setIsScanning(true);
    setScanProgress(0);
    setScanResult(null);

    // Simulate scanning progress
    const intervals = [10, 25, 40, 60, 75, 85, 95, 100];
    for (let i = 0; i < intervals.length; i++) {
      await new Promise(resolve => setTimeout(resolve, 800));
      setScanProgress(intervals[i]);
    }

    // Generate mock results
    const result = generateMockScanResult(scanTarget);
    setScanResult(result);
    setIsScanning(false);

    toast({
      title: "Scan Complete",
      description: `Found ${result.vulnerabilities.length} vulnerabilities`,
    });
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical": return "bg-red-500 text-white";
      case "high": return "bg-orange-500 text-white";
      case "medium": return "bg-yellow-500 text-white";
      case "low": return "bg-blue-500 text-white";
      default: return "bg-gray-500 text-white";
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "critical": return <AlertTriangle className="h-4 w-4" />;
      case "high": return <AlertCircle className="h-4 w-4" />;
      case "medium": return <Clock className="h-4 w-4" />;
      case "low": return <Eye className="h-4 w-4" />;
      default: return <Bug className="h-4 w-4" />;
    }
  };

  return (
    <div className="min-h-screen flex flex-col">
      <Navbar />
      <main className="flex-grow">
        <div className="py-16 bg-gradient-to-br from-red-50 via-orange-50 to-yellow-50 dark:from-red-900/20 dark:via-orange-900/20 dark:to-yellow-900/20">
          <div className="container px-4 sm:px-6">
            <div className="max-w-6xl mx-auto">
              <div className="text-center mb-10">
                <div className="flex items-center justify-center gap-3 mb-4">
                  <Target className="h-8 w-8 text-red-600" />
                  <h1 className="text-4xl font-bold tracking-tight bg-gradient-to-r from-red-600 to-orange-600 bg-clip-text text-transparent">
                    Advanced Vulnerability Scanner
                  </h1>
                </div>
                <p className="text-lg text-muted-foreground max-w-3xl mx-auto">
                  Comprehensive security assessment tool that identifies vulnerabilities, analyzes network services, 
                  and provides actionable recommendations to strengthen your security posture.
                </p>
              </div>

              <Card className="mb-8 border-0 shadow-xl bg-gradient-to-r from-white to-red-50 dark:from-gray-900 dark:to-red-900/20">
                <CardHeader className="bg-gradient-to-r from-red-600 to-orange-600 text-white">
                  <CardTitle className="flex items-center gap-2">
                    <Search className="h-5 w-5" />
                    Security Scan Configuration
                  </CardTitle>
                  <CardDescription className="text-red-100">
                    Enter a domain, IP address, or URL to perform a comprehensive security assessment
                  </CardDescription>
                </CardHeader>
                <CardContent className="p-6">
                  <div className="flex gap-4 mb-4">
                    <Input
                      placeholder="example.com or https://example.com or 192.168.1.1"
                      value={scanTarget}
                      onChange={(e) => setScanTarget(e.target.value)}
                      className="flex-1"
                      disabled={isScanning}
                    />
                    <Button 
                      onClick={handleScan}
                      disabled={isScanning || !scanTarget.trim()}
                      className="bg-gradient-to-r from-red-600 to-orange-600 hover:from-red-700 hover:to-orange-700 px-8"
                    >
                      {isScanning ? (
                        <>
                          <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                          Scanning...
                        </>
                      ) : (
                        <>
                          <Target className="mr-2 h-4 w-4" />
                          Start Scan
                        </>
                      )}
                    </Button>
                  </div>
                  
                  {isScanning && (
                    <div className="space-y-4">
                      <div className="flex justify-between text-sm">
                        <span>Scanning progress</span>
                        <span>{scanProgress}%</span>
                      </div>
                      <Progress value={scanProgress} className="h-3" />
                      <div className="flex items-center gap-2 text-sm text-muted-foreground">
                        <Activity className="h-4 w-4 animate-pulse" />
                        <span>
                          {scanProgress < 20 && "Port scanning..."}
                          {scanProgress >= 20 && scanProgress < 40 && "Service enumeration..."}
                          {scanProgress >= 40 && scanProgress < 60 && "SSL/TLS analysis..."}
                          {scanProgress >= 60 && scanProgress < 80 && "Vulnerability detection..."}
                          {scanProgress >= 80 && scanProgress < 100 && "Security headers analysis..."}
                          {scanProgress >= 100 && "Generating report..."}
                        </span>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>

              {scanResult && (
                <div className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                    <Card className="bg-gradient-to-r from-red-500 to-pink-500 text-white">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                          <AlertTriangle className="h-8 w-8" />
                          <div className="text-right">
                            <div className="text-2xl font-bold">
                              {scanResult.vulnerabilities.filter(v => v.severity === 'critical').length}
                            </div>
                            <div className="text-sm opacity-90">Critical</div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    <Card className="bg-gradient-to-r from-orange-500 to-yellow-500 text-white">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                          <AlertCircle className="h-8 w-8" />
                          <div className="text-right">
                            <div className="text-2xl font-bold">
                              {scanResult.vulnerabilities.filter(v => v.severity === 'high').length}
                            </div>
                            <div className="text-sm opacity-90">High</div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    <Card className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                          <Server className="h-8 w-8" />
                          <div className="text-right">
                            <div className="text-2xl font-bold">{scanResult.open_ports.length}</div>
                            <div className="text-sm opacity-90">Open Ports</div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    <Card className="bg-gradient-to-r from-green-500 to-emerald-500 text-white">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                          <Shield className="h-8 w-8" />
                          <div className="text-right">
                            <div className="text-2xl font-bold">
                              {scanResult.headers_analysis.filter(h => h.status === 'secure').length}
                            </div>
                            <div className="text-sm opacity-90">Secure Headers</div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </div>

                  <Card className="shadow-xl border-0">
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <FileText className="h-5 w-5" />
                        Detailed Security Assessment Results
                      </CardTitle>
                      <CardDescription>
                        Comprehensive analysis for {scanResult.target} - Scanned on {scanResult.scan_time.toLocaleString()}
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <Tabs value={activeTab} onValueChange={setActiveTab}>
                        <TabsList className="grid w-full grid-cols-4">
                          <TabsTrigger value="overview">Overview</TabsTrigger>
                          <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
                          <TabsTrigger value="services">Services</TabsTrigger>
                          <TabsTrigger value="headers">Security Headers</TabsTrigger>
                        </TabsList>

                        <TabsContent value="overview" className="space-y-4">
                          <div className="grid gap-4 md:grid-cols-2">
                            <Card>
                              <CardHeader>
                                <CardTitle className="text-lg">Risk Summary</CardTitle>
                              </CardHeader>
                              <CardContent>
                                <div className="space-y-3">
                                  {['critical', 'high', 'medium', 'low'].map(severity => (
                                    <div key={severity} className="flex justify-between items-center">
                                      <span className="capitalize">{severity} Risk:</span>
                                      <Badge className={getSeverityColor(severity)}>
                                        {scanResult.vulnerabilities.filter(v => v.severity === severity).length}
                                      </Badge>
                                    </div>
                                  ))}
                                </div>
                              </CardContent>
                            </Card>

                            <Card>
                              <CardHeader>
                                <CardTitle className="text-lg">Quick Actions</CardTitle>
                              </CardHeader>
                              <CardContent className="space-y-2">
                                <Button variant="outline" className="w-full justify-start">
                                  <AlertTriangle className="mr-2 h-4 w-4" />
                                  Prioritize Critical Issues
                                </Button>
                                <Button variant="outline" className="w-full justify-start">
                                  <Lock className="mr-2 h-4 w-4" />
                                  Review SSL Configuration
                                </Button>
                                <Button variant="outline" className="w-full justify-start">
                                  <Globe className="mr-2 h-4 w-4" />
                                  Check Security Headers
                                </Button>
                              </CardContent>
                            </Card>
                          </div>
                        </TabsContent>

                        <TabsContent value="vulnerabilities" className="space-y-4">
                          {scanResult.vulnerabilities.map((vuln) => (
                            <Card key={vuln.id} className="border-l-4 border-l-red-500">
                              <CardHeader>
                                <div className="flex items-start justify-between">
                                  <div className="flex items-center gap-2">
                                    {getSeverityIcon(vuln.severity)}
                                    <CardTitle className="text-lg">{vuln.title}</CardTitle>
                                  </div>
                                  <div className="flex gap-2">
                                    <Badge className={getSeverityColor(vuln.severity)}>
                                      {vuln.severity.toUpperCase()}
                                    </Badge>
                                    {vuln.cve && <Badge variant="outline">{vuln.cve}</Badge>}
                                  </div>
                                </div>
                                <CardDescription>{vuln.affected_service}</CardDescription>
                              </CardHeader>
                              <CardContent className="space-y-4">
                                <div>
                                  <h4 className="font-semibold mb-2">Description</h4>
                                  <p className="text-sm text-muted-foreground">{vuln.description}</p>
                                </div>
                                <div>
                                  <h4 className="font-semibold mb-2">Impact</h4>
                                  <p className="text-sm text-muted-foreground">{vuln.impact}</p>
                                </div>
                                <div>
                                  <h4 className="font-semibold mb-2">Recommendation</h4>
                                  <p className="text-sm text-muted-foreground">{vuln.recommendation}</p>
                                </div>
                              </CardContent>
                            </Card>
                          ))}
                        </TabsContent>

                        <TabsContent value="services" className="space-y-4">
                          <div className="grid gap-4">
                            {scanResult.open_ports.map((port, index) => (
                              <Card key={index}>
                                <CardContent className="p-4">
                                  <div className="flex items-center justify-between">
                                    <div className="flex items-center gap-3">
                                      <Server className="h-5 w-5 text-blue-600" />
                                      <div>
                                        <div className="font-semibold">Port {port.port} - {port.service}</div>
                                        {port.version && <div className="text-sm text-muted-foreground">{port.version}</div>}
                                      </div>
                                    </div>
                                    <Badge variant="outline">Open</Badge>
                                  </div>
                                </CardContent>
                              </Card>
                            ))}
                          </div>
                        </TabsContent>

                        <TabsContent value="headers" className="space-y-4">
                          <div className="grid gap-4">
                            {scanResult.headers_analysis.map((header, index) => (
                              <Card key={index}>
                                <CardContent className="p-4">
                                  <div className="flex items-center justify-between mb-2">
                                    <div className="font-semibold">{header.header}</div>
                                    <Badge className={
                                      header.status === 'secure' ? 'bg-green-500 text-white' :
                                      header.status === 'missing' ? 'bg-red-500 text-white' :
                                      'bg-yellow-500 text-white'
                                    }>
                                      {header.status}
                                    </Badge>
                                  </div>
                                  {header.recommendation && (
                                    <p className="text-sm text-muted-foreground">{header.recommendation}</p>
                                  )}
                                </CardContent>
                              </Card>
                            ))}
                          </div>
                        </TabsContent>
                      </Tabs>
                    </CardContent>
                  </Card>
                </div>
              )}
            </div>
          </div>
        </div>
      </main>
      <Footer />
    </div>
  );
};

export default VulnerabilityScanner;
